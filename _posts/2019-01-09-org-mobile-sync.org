#+BEGIN_HTML
---
title: Syncing your Org Mobile data
description:
  "A walkthrough of Emacs configurations for syncing Org Mobile data, and a discussion of the pros and cons of Org Mobile."
lede:
  "Org Mobile is a protocol for a mobile Org workflow. It has some great features and a few drawbacks. In this post, I discuss an /Emacs/ configuration that enhances my use of the protocol by tying the sync step into it."
---
#+END_HTML

[[https://orgmode.org/org.html#Org-Mobile][Org Mobile]] works by creating something like a proxy of your Org files in a designated directory for a mobile app to read and write to.
The same package then provides commands to reingest the modified data and propagate its changes.

I believe [[https://mobileorg.github.io][MobileOrg]] is the only app, at least on iOS, to actually use the /Org Mobile/ protocol.
Others, such as [[https://beorgapp.com/][beorg]], simply synchronize the Org directory itself to edit the files directly.

I think the most compelling reason to use /Org Mobile/, and the reason I decided to try it, is its built-in encryption.
With it, you can make your Org data available to yourself online while keeping it private, uploading nothing but ciphertext[fn:encryption].

The most compelling reason /not/ to use it is certainly that the user must remember to run the functions to /push/ and /pull/ the data.
A close second, most users will find the /MobileOrg/ iOS app disappointing.

With the configuration below, I've tried to mitigate these for my own use by building the sync step into the /Org Mobile/ commands, eliminating the need for an /always-on/ synchronization daemon.

Less successfully thus far, I have tried out ways to trigger /push/ and /pull/ automatically in /Emacs/.

[fn:encryption] Note that /Org Mobile/ will not encrypt the file names, just their contents, so some private information may be gleaned.
** How it works
With the following code in your dotfile, every time you run ~org-mobile-push~, /Emacs/ will (1) clear the /Org Mobile/ directory, (2) write your /Org Mobile/ data to it, and (3) use [[https://rclone.org][rclone]] to sync the newly written files.

On the other end, every time you run ~org-mobile-pull~, /Emacs/ will (1) clear the /Org Mobile/ directory, (2) fetch the data from the cloud---where it may have been updated by your mobile app, and (3) push its changes into your Org directory.

This is done by creating functions that perform those operations and adding them to hooks that run alongside ~org-mobile-pull~ and ~org-mobile-push~.
Find the entire code example in this Github [[https://gist.github.com/tgdnt/f10ef466a3a6ba24cfc39bce23b59b88][gist]].

#+BEGIN_HTML
<aside>
#+END_HTML
In the code examples below, it's assumed that the local /Org Mobile/ directory is ~~/mobileorg~ and that /rclone/ is configured with a cloud service named ~Dropbox~, within which the /Org Mobile/ directory is ~Apps/MobileOrg~.
For more information on /rclone/ configuration, visit [[https://rclone.org/][https://rclone.org/]].
#+BEGIN_HTML
</aside>
#+END_HTML


*** Clearing the Org Mobile directory
Because ~org-mobile-push~ does not update the /Org Mobile/ directory but rather just pushes to it, it won't remove files that have been deleted.
This doesn't really matter because your mobile app should only fetch what is listed in the /index.org/ file anyway, so this step can really be considered optional.

#+BEGIN_SRC emacs-lisp
(defun org-mobile-clean-pre-push()
  (with-temp-buffer(shell-command "rm ~/mobileorg/*" t)))
#+END_SRC

When running ~shell-command~, /Emacs/ will show a buffer with the results of your command.
We don't want to see those, in this case, and they are normally going to be blank anyway. By running the command within ~with-temp-buffer~, that buffer won't persist.
*** Pushing
The function below will run ~rclone sync~[fn:rcloneusage] to upload the /Org Mobile/ data.
The option ~--exclude \.DS_Store~ is used to ignore /macOS/ system files.
Obviously, you may leave this out if you're on another system.

#+BEGIN_SRC emacs-lisp
(defun org-mobile-rclone-sync-post-push()
  (with-temp-buffer
    (shell-command "rclone sync ~/mobileorg Dropbox:Apps/MobileOrg --exclude \.DS_Store" t)))
#+END_SRC

[fn:rcloneusage] Usage: ~rclone sync [source] [destination] [options]~
*** Pulling
Since we only need to run extra actions /before/ ~org-mobile-pull~ runs, they can all go in the same function.

#+BEGIN_SRC emacs-lisp
(defun org-mobile-rclone-sync-pre-pull()
  (with-temp-buffer
    (shell-command "rm ~/mobileorg/*" t)
    (shell-command "rclone sync Dropbox:Apps/MobileOrg ~/mobileorg" t)))
#+END_SRC

*** Adding hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mobile-pre-push-hook 'org-mobile-clean-pre-push)
(add-hook 'org-mobile-post-push-hook 'org-mobile-rclone-sync-post-push)
(add-hook 'org-mobile-pre-pull-hook 'org-mobile-rclone-sync-pre-pull)
#+END_SRC

** Automatically syncing at /Emacs/ startup
So far, I have been unable to find an adequate way to trigger /push/ and /pull/ without the user initiating them.
The first thing that comes to mind is to add ~org-mobile-pull~ to your /init.el/ file and ~org-mobile-push~ to the ~kill-emacs-hook~.

#+BEGIN_SRC emacs-lisp
(add-hook 'kill-emacs-hook 'org-mobile-push)
(org-mode)
(org-mobile-pull)
#+END_SRC

Note that before ~org-mobile-pull~, ~org-mode~ should be called.
It seems like the function ~org-mobile-pull~ is not defined otherwise, so it won't run at all.
An unwanted side effect is that, in [[http://spacemacs.org/][Spacemacs]], when you use ~SPC f e R~ to reload your dotfile, it will put your current buffer in /Org mode/, and as you are likely to be editing your /dotfile/, you would certainly prefer to remain in /Emacs Lisp mode/.

Perhaps even worse, it slows /Emacs/ startup and shutdown considerably.
The obvious alternative, the ~org-mode-hook~ runs every time you switch to a Org mode buffer, not just the first time you do, making it unusable.

As problematic as these options are, I think some such provision is essential to using /Org Mobile/ successfully.
** Conclusion
Hard as I may try, /Org Mobile/ remains a tough sell.
I doubt if there are very many people using it out there.
But as I see it, for those who are using a great app like /beorg/, having to expose your Org data to a cloud provider in plain text is a big price to pay[fn:selfhost].

An excellent /Org Mobile/ workflow would run in /Emacs/ as a background process that, the moment the user first enters /Org mode/ during a session, prompts to confirm synchronization, then pushes data automatically whenever an Org file is saved.
If it can integrate with /rclone/ as I did here, so much the better.

For now, though, I have moved over to /beorg/ for its great integration with the iOS Calendar, matched by the /Emacs diary/ within the /Org Agenda/[fn:diary].
I'm happy to support a developer that is working on an Org app.

However, as I learn more about /Emacs Lisp/, I must revisit /Org Mobile/ and hopefully even contribute to it.
As always, if you have any ideas, please share them with me by [[mailto:tiago@tgdnt.com?subject=Org Mobile Sync][email]].

[fn:selfhost] Of course, for those who want to do that, a private alternative would be to host your own /WebDAV/ server. On the internet of my dreams, however, even self-hosted data is end-to-end encrypted.
[fn:diary] I have also written a script, run via /cron/, that exports calendar data from /Khal/ compatible with /Emacs diary/, keeping that always in sync with my iCloud calendars. I'll discuss that in a future post.
