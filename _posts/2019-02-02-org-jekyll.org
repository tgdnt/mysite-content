#+BEGIN_HTML
---
title: Typing for Jekyll with Org syntax
description: Notes on creating a bash script to convert Org syntax to HTML for use with Jekyll.
lede:
  To type for this site, generated with Jekyll, I searched for a way to use Org syntax rather than the standard Markdown. This is a record of creating a bash script to convert Org syntax to HTML with special tweaks for Jekyll.
---
#+END_HTML
** Why Org?
The most popular plain text markup for rich export is Markdown.
It is easy to type, with syntax is easy to memorize, and its plain text form can be easy to read.

Its popularity, however, doesn't quite pay off.
Seemingly due to the shortcomings of its original spec[fn::Found on [[https://daringfireball.net/projects/markdown/][John Gruber's website]].], multiple "flavors" of Markdown have emerged, and it is not always clear which one is in use in a certain application.
/Pandoc/, for example, can export to six different types of Markdown.

Org, on the other hand, is one standard centered around an excellent tool for editing it: Emacs Org mode.
Org syntax is by no means perfect, but it has been there for a long time, it is just as easy to work with as Markdown, and is certainly more reliable for rich export.

Typically, Org fans will argue that you would be hard pressed to find an application for working with Markdown syntax that is as good as Emacs Org mode.
Indeed, most Markdown typing application are fairly uninspiring.
Of course the obstacle for a lot of people is taking on Emacs. To those of you in that crowd, I suggest looking at [[https://spacemacs.org/][Spacemacs]].

** Starting out with MkDocs
Hoping to give my site a documentation feel, I set out working with [[https://www.mkdocs.org/][MkDocs]], a static site generator for software documentation.
I had envisioned collections of articles on a number of subjects, which I could group together and display as if documentation.
I Soon found that MkDocs really only made sense for actual documentation, but not before I had written a bash script to convert my Org files into Markdown and then build the site with MkDocs.

Here are some of my lightly edited notes from working with MkDocs.
For kicks, I was trying to do this in a literate programming sort of way[fn:litprog].

[fn:litprog] Literate programming is a programming paradigm in which you sort of string together code and documentation. I recommend trying it.

See https://en.wikipedia.org/wiki/Literate_programming and http://www.cachestocaches.com/2018/6/org-literate-programming/.

*** Noted on [2018-12-02 Sun 21:50]
The following command will convert Org files into Markdown files.

#+BEGIN_SRC bash
pandoc -t gfm --wrap=preserve -o output.md input.org
#+END_SRC

The ~gfm~ format (Github-flavored Markdown) has so far worked well with MkDocs.
The option ~--wrap=preserve~ is necessary because, by default, /pandoc/ will create line breaks, which will be ignored by the markdown parser.
However, if they come inside inline code, the line break will make it into the rendered HTML.
To prevent this, tell pandoc to preserve the original text wrapping.
*** Noted on [2018-12-02 Sun 23:35]
To operate on all the Org files we need, the script has to create a variable for the new filename, changing its extension via /sed/[fn:sed], and then, using a ~while~ loop, iterate through every ~.org~ file within the present working directory or any of its subdirectories.

#+BEGIN_SRC bash
find . -name "*.org" | while read -r filename
do newfilename=$(echo $filename | sed -e "s/\.org/.md/g")
pandoc -t gfm --wrap=preserve -o $newfilename $filename
done
#+END_SRC
[fn:sed] /sed/, stream editor, is a Unix program that can manipulate text. It's one of the most useful tools to learn for bash scripting.

See http://www.grymoire.com/Unix/Sed.html
*** Noted on [2018-12-03 Mon 13:32]
Upon running this from ~.travis.yml~, I had to use ~dist: xenial~, which allows me to install /pandoc/ 1.16 as a dependency, in which the option ~--wrap=preserve~ works. 
Other dists only allowed /pandoc/ 1.12, which did not have that option yet.
The output format ~gfm~ does not work even in 1.16, but the now deprecated ~markdown_github~ appears to work fine.
** Moving to Jekyll
In /[[https://orgmode.org/worg/org-tutorials/org-jekyll.html][Using org to blog with Jekyll]]/, Org documentation recommends certain practices for typing content for Jekyll, some of which I have followed[fn::It's worth mentioning that there is a gem called /[[https://github.com/eggcaker/jekyll-org][jekyll-org]]/ that claims to enable Org syntax in Jekyll. It looks very interesting, but for now I've decided to stick with my script because it is simpler and easier to debug.].

I enclose my front matter between ~#+BEGIN_HTML~ and ~#+END_HTML~ tags.
Similarly, such tags are useful for inserting elements that are not covered by Org syntax, such as the ~<aside>~ element.[fn:aside]

The line below will find all the ~.org~ files within the Org source folder, which here is ~./_orgsource~, and then start a ~while~ loop to work through them.

#+BEGIN_SRC bash
find ./_orgsource -name "*.org" | while read -r filename; do
#+END_SRC

Another important tweak is to transform Org-style fenced code blocks---enclosed in ~#+BEGIN_SRC~ tags---into the appropriately tagged blocks for Jekyll to highlight them via /[[https://jekyllrb.com/docs/liquid/tags/#code-snippet-highlighting][Rouge]]/.
This was done with a sed command to remove ~#+BEGIN_SRC~ tags and replace them with a ~#+BEGIN_HTML~ tag followed by the liquid ~{% raw %}{% highlight %}{% endraw %}~ tags.
The script will automatically do this throughout each file, wherever ~#+BEGIN_SRC~ tags appear. The first /sed/ command takes care of the opening and the second does the closing. Note that it is necessary for the language identifier here to match between Org and Rouge.

#+BEGIN_SRC bash
sed -e 's/\(\#\+BEGIN\_SRC \)\(.*\)/\#\+BEGIN_HTML\
{\% highlight \2 \%}/' -e 's/\#\+END\_SRC/{\% endhighlight \%}\
\#\+END_HTML/' $filename > $filename.temp.org
#+END_SRC

Next, we use /sed/ again to change the file extension, just as we did before, but this time we also need to drop the ~_orgsource/~ bit of the file name.
This is what will ensure that the whole subtree within your source directory transfers over to the root after conversion into HTML.

#+BEGIN_SRC bash
newfilename=$(echo $filename | sed -e "s/\(\.\/\)\(\_orgsource\/\)\(.*\)\(.org\)/\1\3\.html/g")
# Input: ./_orgsource/_posts/2019-01-01-my-great-post.org
# Output: ./_posts/2019-01-01-my-great-post.html
#+END_SRC

The source folder should be structured to mirror the root of your project folder, so that all the exported files will fall into their appropriate places for Jekyll to find them.

Finally, we can run the temporary HTML file through /pandoc/.
This time we won't need to worry about the issue with the newlines in the Markdown conversion, because we are going straight to HTML.
After that, we can also remove the temporary file we just converted, close the ~while~ loop and run Jekyll.

#+BEGIN_SRC bash
pandoc -t html -o $newfilename $filename.temp.org
rm $filename.temp.org
done
bundle exec jekyll $@
#+END_SRC

You may run the script with the same parameters you would normally run ~jekyll~ with.

To remove any previously generated files from your working directory before you regenerate your site, we must use ~git clean -df~ at the very beginning of the script, followed by ~mkdir _posts~ to recreate the empty ~_posts~ folder.

#+BEGIN_SRC bash
git clean -df
mkdir _posts
#+END_SRC

And that is how I convert my Org-formatted content for Jekyll.
Thank you for reading, I hope this may be useful to some of you who really like Org.
See the final script in this [[https://gist.github.com/tgdnt/cba70c5fda14fac47eefb9be80677e94][Github gist]].

[fn:aside] I think an /aside/ can be understood as a footnote that's not related to any specific word or sentence.
You want to set it aside from the regular content after a certain paragraph, not within it.

A lot of web developers use the ~<aside>~ element for sidebars and other template-level things.
For example, [[https://bigfootjs.com/][Bigfoot]] footnotes use it, largely relying on developers not styling it.
