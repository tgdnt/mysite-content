#+BEGIN_HTML
---
title: Typing for Jekyll with Org syntax
description: 
  "Notes on creating a bash script to convert Org syntax to HTML for use with Jekyll."
lede:
  "This is a *Jekyll* site for which I type content in Org syntax. In this post, I share a record of creating a bash script to convert Org syntax to HTML for *Jekyll*."
---
#+END_HTML
** Why Org?
The most popular plain text markup for rich export is [[https://daringfireball.net/projects/markdown/][Markdown]].
It is easy to type, with syntax that's easy to memorize, and its plain text form can be easy to read.

Its popularity, however, doesn't quite pay off.
Seemingly due to shortcomings in its original version, multiple standards have emerged, and it's not always clear which one is in use or how much of it is actually implemented.
[[http://pandoc.org][Pandoc]], for example, can export to /six/ different types of Markdown, and various different specs can have minor differences that can be hard to remember.

[[https://orgmode.org/org.html#Org-Mobile][Org]], on the other hand, is one standard centered around an excellent tool for editing it: /Emacs Org mode/.
Org syntax is by no means perfect, but it has been there for a long time and is just as easy to work with as Markdown.
Those who want to use Org for typing are typically people who, like myself, already use Org to organize their work and are just used to the syntax.

** Starting out with MkDocs
Hoping to give my site a documentation feel, I set out working with [[https://www.mkdocs.org/][MkDocs]], a static site generator for software documentation.
I had envisioned collections of articles on a number of subjects, which I could group together and display as if documentation.
I Soon found that MkDocs really only made sense for actual documentation, but not before I had written a /bash/ script to convert my Org files into Markdown and then build the site with MkDocs.

Here are some of my lightly edited notes from working with /MkDocs/.

*** Noted on [2018-12-02 Sun 21:50]
The following command will convert Org syntax into Markdown.

#+BEGIN_SRC bash
pandoc -t gfm --wrap=preserve -o output.md input.org
#+END_SRC

The option ~-t gfm~ selects /Github-flavored Markdown/ as the output format, which has so far worked well with MkDocs.
For better plain text readability, ~pandoc~ creates line breaks that are ignored during export.
However, if they come within a span of inline code, the line break will make it into the rendered HTML.
To prevent this, we must tell ~pandoc~ to preserve the original text wrapping by giving it the option ~--wrap=preserve~.
*** Noted on [2018-12-02 Sun 23:35]
To operate on all the Org files we need, the script has to create a variable for the new filename, changing its extension via ~sed~[fn:sed], and then, using a ~while~ loop, iterate through every ~.org~ file within the present working directory or any of its subdirectories.

#+BEGIN_SRC bash
find . -name "*.org" | while read -r filename; do
  newfilename=$(echo $filename | sed -e "s/\.org/.md/g")
  pandoc -t gfm --wrap=preserve -o $newfilename $filename
done
#+END_SRC
[fn:sed] ~sed~, stream editor, is a Unix program that can manipulate text. It's one of the most useful tools to learn for bash scripting.

See http://www.grymoire.com/Unix/Sed.html
*** Noted on [2018-12-03 Mon 13:32]
Upon running this from ~.travis.yml~, I had to use ~dist: xenial~, which allows me to install ~pandoc~ 1.16 as a dependency, in which the option ~--wrap=preserve~ works. 
Other dists only allowed ~pandoc~ 1.12, which did not have that option yet.
The output format ~gfm~ does not work even in 1.16, but the now deprecated ~markdown_github~ appears to work fine.
** Moving to Jekyll
It's worth mentioning that there is a gem called /[[https://github.com/eggcaker/jekyll-org][jekyll-org]]/ that claims to enable Org syntax in /Jekyll/.
It looks very interesting, but for now I've decided to stick with my script because it is simpler and easier to debug.

As suggested in /[[https://orgmode.org/worg/org-tutorials/org-jekyll.html][Using org to blog with Jekyll]]/, I enclose my front matter between ~#+BEGIN_HTML~ and ~#+END_HTML~ tags.
Similarly, such tags are useful for inserting elements that are not covered by the Org syntax, such as the ~<aside>~ element.

Largely unchanged from its MkDocs version, the line below will find all the ~.org~ files within the Org source folder, which here is ~./_orgsource~, and then start a ~while~ loop to work through them.

#+BEGIN_SRC bash
find ./_orgsource -name "*.org" | while read -r filename; do
#+END_SRC

/Jekyll/ has a special way of doing code highlighting[fn:rouge] that is activated by a /Liquid/ tag.
To transform Org-style source code blocks into the appropriately tagged blocks, a ~sed~ command replaces ~#+BEGIN_SRC~ tags with a ~#+BEGIN_HTML~ tag followed by the /Liquid/ ~{% raw %}{% highlight %}{% endraw %}~ tags.

The script will automatically do this throughout each file, wherever ~#+BEGIN_SRC~ tags appear.
Note that the language identifier here must match between Org and Rouge for this to work.

#+BEGIN_SRC bash
sed -e 's/\(\#\+BEGIN\_SRC \)\(.*\)/\#\+BEGIN_HTML\
{\% highlight \2 \%}/' -e 's/\#\+END\_SRC/{\% endhighlight \%}\
\#\+END_HTML/' $filename > $filename.temp.org
#+END_SRC

Next, we use ~sed~ again to change the file extension, as we did before, but this time we also need to drop the ~_orgsource/~ bit of the file name.
This is what will ensure that the whole structure within your source directory transfers over to the root after converting into HTML.

#+BEGIN_SRC bash
newfilename=$(echo $filename | sed -e "s/\(\.\/\)\(\_orgsource\/\)\(.*\)\(.org\)/\1\3\.html/g")
# Input: ./_orgsource/_posts/2019-01-01-my-great-post.org
# Output: ./_posts/2019-01-01-my-great-post.html
#+END_SRC

The source folder should be structured to mirror the root of your project folder, so that all the exported files will fall into their appropriate places for /Jekyll/ to find them.

Finally, we can run the temporary HTML file through ~pandoc~.
This time we won't need to worry about the issue with the newlines in the Markdown conversion, because we are going straight to HTML.
After that, we can also remove the temporary file we just converted, close the ~while~ loop and run ~jekyll~.

#+BEGIN_SRC bash
pandoc -t html -o $newfilename $filename.temp.org
rm $filename.temp.org
done
bundle exec jekyll $@
#+END_SRC

Thanks to the last line, you may run the script with the same parameters you would normally run ~jekyll~ with, they are passed along by the ~$@~ variable.

To remove any previously generated files from our working directory before we regenerate our site, we must use ~git clean -df~ at the very beginning of the script, followed by ~mkdir _posts~ to recreate the empty ~_posts~ folder.

#+BEGIN_SRC bash
git clean -df
mkdir _posts
#+END_SRC

And that is how I convert my Org-formatted content for /Jekyll/.
See the final script in this [[https://gist.github.com/tgdnt/cba70c5fda14fac47eefb9be80677e94][Github gist]].

[fn:rouge] Jekyll uses a package called /Rouge/ for code highlighting, see [[https://jekyllrb.com/docs/liquid/tags/#code-snippet-highlighting][link]] for more.

** Further work
First of all, although this has been fun to work on, it would be reasonable to look into /jekyll-org/ and consider using it.
It may present a good opportunity to learn in /Ruby/, if I could try to build some of what I did here into that.

As of right now, my thoughts towards the future of this script have been towards converting a ~#+BEGIN_ASIDE~ block, which would perhaps amount to extending Org syntax.

Beyond this script, I also have several notes about /asides/ and the ~<aside>~ element, which I will edit into an article, as I spend more time on matters of writing and style rather than tooling.

I appreciate your reading, and I hope this may be useful to some of you who really like Org.
Please share with me any thoughts and ideas related to this post via [[mailto:tiago@tgdnt.com?subject=Typing%20for%20Jekyll%20with%20Org%20syntax][email]].
